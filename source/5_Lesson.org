#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Topic 5 - Put it Together
#+AUTHOR: X Ellis

#+BEGIN_EXPORT HTML
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Topic1</a></li>
      <li><a href="2_Lesson.html">Topic2</a></li>
      <li><a href="3_Lesson.html">Topics3</a></li>
      <li><a href="4_Lesson.html">Topic4</a></li>
      <li><a href="5_Lesson.html">Topic5</a></li>
      <li><a href="6_Lesson.html">Topic6</a></li>

      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>
#+END_EXPORT

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* learning strand, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- further develop problems solving skills by applying the following:
+ *pattern recognition*
+ *algorithmic thinking*
- futher develop *programming skills* by implementing working solutions using *selection*, and *repetition* 
- appreciate the need for, and writes, *custom functions* including use of parameters
* Put Everything Together to Solve Problems
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Problem 1 - draw a circle without using the built-in circle function
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

- So, lets try to make one circle without using the built-in circle function
- To draw a circle, in order to calculate how much to turn and move, we need to know the circle's radius.  
- Lets store this radius in a variable called R. R can be any number depending on the size of the circle.
- If we want the turtle to move in 360 steps, then each step should be the circle's circumference divided by 360 and the turning angle should be 360^o/360 = 1^o
#+BEGIN_SRC 
a circle's circumference is calculates as following:
      2*R*3.14    where 3.14 is pi, R is the radius

#+END_SRC
- If we want the turtle to move in less steps, say in 180 steps, then each step should be the circle's circumference divided by 180 and the turning angle should be 360^o/180 = 2^o
- If we can create a function called circle, then we can use it again later to make circles in different sizes
- Here is some hint if you forgot how to create a function in Python:
    #+BEGIN_SRC python
def circle(radius):
    your code goes here!

#+END_SRC



** Your Turne - make your own circle function using radius as the parameter
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- *Your task*: create a circle function with the radius as a parameter so that function can be called to create circles with any radius
- Test your new function by draw at least 2 circles in different radius
- You must test your solution by calling the function with at least two different radius to create two different circles.
- Screenshot your code and the result to Teams. 

#+BEGIN_EXPORT HTML
<iframe src="https://trinket.io/embed/python/2da2034bc9" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
#+END_EXPORT

** Problem 2 - Blossom
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- using the circle function you have created, draw a flower with different petal sizes
- Screenshot your code and the result to Teams


** Problem 3 - Concentric circles with different colours
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
*** Learning Strand: Programming and Development
- Take look at the following image.
#+BEGIN_EXPORT HTML
<img src="./img/turtleCircles.png" width=200 height=200>
#+END_EXPORT
- Identify the pattern and finished the implementation by using the basic code below.
- Screenshot your code and the result to Teams
#+BEGIN_EXPORT HTML

<iframe src="https://trinket.io/embed/python/d89a17c650" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
#+END_EXPORT


